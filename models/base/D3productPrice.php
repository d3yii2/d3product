<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3product\models\base;

use Yii;
use d3system\yii2\validators\D3TrimValidator;
use d3yii2\d3product\models\D3productPriceQuery;
use d3yii2\d3product\models\D3productProduct;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "d3product_price".
 *
 * @property integer $id
 * @property integer $product_id
 * @property float $price
 * @property string $notes
 *
 * @property D3productProduct $product
 * @property string $aliasModel
 */
abstract class D3productPrice extends ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'd3product_price';
    }

    /**
     * @inheritdoc
     */
    public function rules(): array
    {
        return [
            'trimNumbers' => [['id','product_id','price'],D3TrimValidator::class, 'trimOnlyStringValues' => true],
            'required' => [['product_id', 'price'], 'required'],
            'decimal-unsigned-10-2' => [
                ['price'],
                    'number',
                    'numberPattern' => '/^(\+?((\d{1,8})|(\d{0,8}\.\d{0,2})|(\.\d{1,2})))$/',
                    'message' =>  Yii::t('crud', 'Invalid number format')
                ],
            'smallint Unsigned' => [['id','product_id'],'integer' ,'min' => 0 ,'max' => 65535],
            [['notes'], 'default', 'value' => null],
            [['price'], 'number'],
            [['notes'], 'string'],
            [['product_id'], 'exist', 'skipOnError' => true, 'targetClass' => D3productProduct::class, 'targetAttribute' => ['product_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels(): array
    {
        return [
            'id' => Yii::t('d3product', 'ID'),
            'product_id' => Yii::t('d3product', 'Product'),
            'price' => Yii::t('d3product', 'Price'),
            'notes' => Yii::t('d3product', 'Notes'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints(): array
    {
        return array_merge(parent::attributeHints(), [
            'product_id' => Yii::t('d3product', 'Product'),
            'price' => Yii::t('d3product', 'Price'),
            'notes' => Yii::t('d3product', 'Notes'),
        ]);
    }

    /**
     * @return ActiveQuery
     */
    public function getProduct(): ActiveQuery
    {
        return $this
            ->hasOne(D3productProduct::class, ['id' => 'product_id'])
            ->inverseOf('d3productPrices');
    }

    /**
     * @inheritdoc
     * @return D3productPriceQuery the active query used by this AR class.
     */
    public static function find(): D3productPriceQuery    {
        return new D3productPriceQuery(get_called_class());
    }
}
